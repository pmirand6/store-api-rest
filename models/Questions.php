<?php

namespace app\models;

use Yii;
use app\apis\Auth;

/**
 * This is the model class for table "questions".
 *
 * @property int $id
 * @property int $products_id
 * @property int $clients_id
 * @property string|null $question
 * @property string|null $answer
 * @property string|null $questioned_at
 * @property string|null $answered_at
 * @property string|null $deleted_at
 *
 * @property Clients $clients
 * @property Products $products
 */
class Questions extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'questions';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['products_id'], 'required'],
            [['products_id', 'clients_id'], 'integer'],
            [['question', 'answer'], 'string'],
            [['questioned_at', 'answered_at', 'deleted_at'], 'safe'],
            [['clients_id'], 'exist', 'skipOnError' => true, 'targetClass' => Clients::className(), 'targetAttribute' => ['clients_id' => 'id']],
            [['products_id'], 'exist', 'skipOnError' => true, 'targetClass' => Products::className(), 'targetAttribute' => ['products_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'products_id' => 'Products ID',
            'clients_id' => 'Clients ID',
            'question' => 'Question',
            'answer' => 'Answer',
            'questioned_at' => 'Questioned At',
            'answered_at' => 'Answered At',
            'deleted_at' => 'Deleted At',
        ];
    }

    /**
     * Gets query for [[Clients]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getClients()
    {
        return $this->hasOne(Clients::className(), ['id' => 'clients_id']);
    }

    /**
     * Gets query for [[Products]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasOne(Products::className(), ['id' => 'products_id']);
    }

    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        }
        try{
            //Trabajamos los datos de usuario: 
            if($this->isNewRecord) {
                $auth = Auth::instance();
                $authUser = $auth->getUser();

                if(!($authUser instanceof Users)) {
                    ResponseHelper::run(500);
                    return ['error' => true, 'message' => 'No está registrado'];
                }

                $client = $authUser->client;

                if(!($client instanceof Clients)) {
                    ResponseHelper::run(500);
                    return ['error' => true, 'message' => 'No está como cliente'];
                }

                $this->clients_id = $client->id;
            }
            
            return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        }
        catch(Exeption $e)
        {
            throw new \yii\web\NotFoundHttpException;
        }
    }
}
