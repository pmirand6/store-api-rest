<?php

namespace app\models;

use Yii;
use app\apis\Auth;

/**
 * This is the model class for table "favorites".
 *
 * @property int $id
 * @property int $clients_id
 * @property int $products_id
 * @property string $created_at
 * @property string|null $deleted_at
 * @property string $updated_at
 *
 * @property Clients $clients
 * @property Products $products
 * @property FavoritesLog[] $favoritesLogs
 */
class Favorites extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'favorites';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['products_id'], 'required'],
            [['clients_id', 'products_id'], 'integer'],
            [['created_at', 'deleted_at', 'updated_at'], 'safe'],
            [['clients_id'], 'exist', 'skipOnError' => true, 'targetClass' => Clients::className(), 'targetAttribute' => ['clients_id' => 'id']],
            [['products_id'], 'exist', 'skipOnError' => true, 'targetClass' => Products::className(), 'targetAttribute' => ['products_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'clients_id' => 'Clients ID',
            'products_id' => 'Products ID',
            'created_at' => 'Created At',
            'deleted_at' => 'Deleted At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * Gets query for [[Clients]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getClients()
    {
        return $this->hasOne(Clients::className(), ['id' => 'clients_id']);
    }

    /**
     * Gets query for [[Products]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasOne(Products::className(), ['id' => 'products_id']);
    }

    /**
     * Gets query for [[FavoritesLogs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getFavoritesLogs()
    {
        return $this->hasMany(FavoritesLog::className(), ['id' => 'id']);
    }
    
    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        }

        // Update date
        if(!$insert) {
            $this->updated_at = date('Y-m-d H:i:s', strtotime('NOW'));
        }
        
        try{
            $auth = Auth::instance();
            $user = $auth->getUser();
            if(!$user) {
                throw new \Exception("User not found");
            }

            $client = $user->client;
            if(!$client) {
                throw new \Exception("Client not found");
            }

            $this->clients_id = $client->id;

            return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        }
        catch(Exeption $e)
        {
            throw new \yii\web\NotFoundHttpException;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        $log = new FavoritesLog();
        $log->setAttributes( $this->getAttributes() );
        $log->save();
    }

    public function softDelete()
    {
        $this->deleted_at = date('Y-m-d H:i:s');
    }
}
